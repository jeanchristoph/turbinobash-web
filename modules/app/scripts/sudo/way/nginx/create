#!/bin/bash

#C# All $(app_list)
#C# $(find /usr/bin/ -name "php*.*"| sed 's%/usr/bin/php%%')
#C--# --certbot	--webdomain --www --remove --template=pma --template=joomla --noconfdb --noconfwebserver --noconfphpfppm --wildcard

mkdir -p /apps

email=$(cat /conf/email)

[ -z "$webdomain" ] && webdomain=$(cat /conf/webdomain) || dom_from_cl=on

[ -e /conf/php ] && php=$(cat /conf/php) || php=7.4

tb_getopt app php=$php - $@

[ "$remove" == "on" ] && tb app sudo/way/nginx/remove $app --force

d_app=$d_apps/$app

#Â user creation fi don't exists
if ! getent passwd $app &>/dev/null; then
	useradd -m -s/bin/bash ${app} -d $d_app
fi

# directories creation
mkdir -pv $d_app/{app/webroot,etc/php,log,sav,tmp}

# remember chosen php version
echo $php >$d_app/etc/php/version

# db user create mariadb db passwd set + db create + grant to user
if [ "$noconfdb" != "on" ]; then
	tb mysql sudo/user/create $app
	tb mysql sudo/user/passwd $app
	tb mysql sudo/db/create $app
	tb mysql sudo/grant $app all $app
fi

# source app confs

if [ "$wildcard" = "on" ]; then
	mkdir -p /etc/letsencrypt/

	echo "ssl_session_cache shared:le_nginx_SSL:10m;
ssl_session_timeout 1440m;
ssl_session_tickets off;

ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers off;

ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

" >/etc/letsencrypt/options-ssl-nginx.conf

	echo "-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz
+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a
87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7
YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi
7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD
ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==
-----END DH PARAMETERS-----
" >/etc/letsencrypt/ssl-dhparams.pem

	. $TB_MODULE_DIR/templates/nginx-wildcard.conf

else
	. $TB_MODULE_DIR/templates/nginx.conf
fi

# nginx conf path
f_nginx=/etc/nginx/sites-enabled/10-$app.conf
# if [ ! -e $f_nginx ];
# then

if [ "$noconfwebserver" != "on" ]; then
	# if domain came from --options
	if [[ "$dom_from_cl" = "on" ]]; then

		echo "$conf_nginx_dom" >$f_nginx

		# add www if option --www
		[ "$www" = "on" ] && echo "$conf_nginx_dom_www" >$f_nginx
	else
		echo "$conf_nginx_app" >$f_nginx
	fi
	service nginx reload
	# fi
	cat $f_nginx
fi

# default php index file
f_index=$d_app/app/webroot/index.php
if [ ! -e $f_index ]; then
	echo "$conf_index" >$f_index
fi

if [ "$noconfphpfppm" != "on" ]; then
	# remove the FPM conf
	for f in $(find /etc/php/ -name 10-${app}.conf); do rm $f; done

	# FPM conf creation
	f_fpm=/etc/php/${php}/fpm/pool.d/10-${app}.conf
	# if [ ! -e $f_fpm ];
	# then

	echo "$conf_fpm" >$f_fpm

	service php${php}-fpm restart
	# fi
	cat $f_fpm
fi

# reload all fpm
for v in $(find /etc/systemd/system -name "php[0-9].*" | sed "s%-fpm.service%%g" | sed "s%.*php%%g"); do
	service php$v-fpm reload
done

mkdir -p $d_app/tmp/sessions

# if user app exists set user & group rights
if getent passwd $app &>/dev/null; then
	cd $d_app

	chown $app:www-data .
	chown $app:www-data * -R
fi

mkdir -p $d_app/.ssh

touch $d_app/.ssh/authorized_keys
mkdir -p $d_app/etc/ssh/

if [ ! -e $d_app/etc/ssh/passwd ]; then
	ssh_passwd=$(gen_urandom_passwd 20)
	echo $ssh_passwd >$d_app/etc/ssh/passwd

	echo -e "$ssh_passwd\n$ssh_passwd" | passwd $app
fi

if [ -n "$template" ]; then
	[ "$template" = "pma" ] && tb template sudo/$template/install $app
	[ "$template" = "joomla" ] && tb template sudo/$template/install $app
fi

tb app sudo/bulldozer $app

# SSL certificate creation
if [[ "$certbot" = "on" ]]; then

	#if domain fcame from command lie
	if [[ "$dom_from_cl" = "on" ]]; then

		# webdomain SSL certificat
		cert="certbot run -n --expand --nginx --agree-tos -d $webdomain -m certbot_email=$email --redirect"

		# webdomain & www.webdomain SSL certificat without redirect
		[ "$www" = "on" ] && cert="certbot run -n --expand --nginx --agree-tos -d $webdomain -m certbot_email=$email -d www.$webdomain"
		$cert

		echo "$webdomain"

	else
		# app.webdomain certificat
		certbot run -n --expand --nginx --agree-tos -d $app.$webdomain -m certbot_email=$email --redirect
	fi
fi
